// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/component/cmd/v1/api.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	pkg/component/cmd/v1/api.proto

It has these top-level messages:
	CmdPackage
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdPackage_CmdType int32

const (
	CmdPackage_REQUEST  CmdPackage_CmdType = 0
	CmdPackage_RESPONSE CmdPackage_CmdType = 1
)

var CmdPackage_CmdType_name = map[int32]string{
	0: "REQUEST",
	1: "RESPONSE",
}
var CmdPackage_CmdType_value = map[string]int32{
	"REQUEST":  0,
	"RESPONSE": 1,
}

func (x CmdPackage_CmdType) String() string {
	return proto.EnumName(CmdPackage_CmdType_name, int32(x))
}
func (CmdPackage_CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// CmdPackage stream from server to client
type CmdPackage struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	// Name is the name of cmd
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// Type determine the cmdPackage is Request or Response
	Type CmdPackage_CmdType `protobuf:"varint,3,opt,name=Type,enum=v1.CmdPackage_CmdType" json:"Type,omitempty"`
	// Args is tha cmd args, key is args name, value is json content
	Args map[string]string `protobuf:"bytes,4,rep,name=Args" json:"Args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Caller who call the cmd
	Caller string `protobuf:"bytes,5,opt,name=Caller" json:"Caller,omitempty"`
	// Executor who execute the cmd
	Executor string `protobuf:"bytes,6,opt,name=Executor" json:"Executor,omitempty"`
	// Code is the number returned by executor
	RespCode uint32 `protobuf:"varint,7,opt,name=RespCode" json:"RespCode,omitempty"`
	// Data is the result content returned by executor
	RespData []byte `protobuf:"bytes,8,opt,name=RespData,proto3" json:"RespData,omitempty"`
	// Msg is the simple string returned by executor
	RespMsg string `protobuf:"bytes,9,opt,name=RespMsg" json:"RespMsg,omitempty"`
	// Stream specify this cmd if is need return stream
	Stream bool `protobuf:"varint,10,opt,name=Stream" json:"Stream,omitempty"`
}

func (m *CmdPackage) Reset()                    { *m = CmdPackage{} }
func (m *CmdPackage) String() string            { return proto.CompactTextString(m) }
func (*CmdPackage) ProtoMessage()               {}
func (*CmdPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CmdPackage) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CmdPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CmdPackage) GetType() CmdPackage_CmdType {
	if m != nil {
		return m.Type
	}
	return CmdPackage_REQUEST
}

func (m *CmdPackage) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CmdPackage) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *CmdPackage) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *CmdPackage) GetRespCode() uint32 {
	if m != nil {
		return m.RespCode
	}
	return 0
}

func (m *CmdPackage) GetRespData() []byte {
	if m != nil {
		return m.RespData
	}
	return nil
}

func (m *CmdPackage) GetRespMsg() string {
	if m != nil {
		return m.RespMsg
	}
	return ""
}

func (m *CmdPackage) GetStream() bool {
	if m != nil {
		return m.Stream
	}
	return false
}

func init() {
	proto.RegisterType((*CmdPackage)(nil), "v1.CmdPackage")
	proto.RegisterEnum("v1.CmdPackage_CmdType", CmdPackage_CmdType_name, CmdPackage_CmdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CmdManager service

type CmdManagerClient interface {
	// Execute send commands to client to execute
	Execute(ctx context.Context, opts ...grpc.CallOption) (CmdManager_ExecuteClient, error)
}

type cmdManagerClient struct {
	cc *grpc.ClientConn
}

func NewCmdManagerClient(cc *grpc.ClientConn) CmdManagerClient {
	return &cmdManagerClient{cc}
}

func (c *cmdManagerClient) Execute(ctx context.Context, opts ...grpc.CallOption) (CmdManager_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CmdManager_serviceDesc.Streams[0], c.cc, "/v1.CmdManager/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdManagerExecuteClient{stream}
	return x, nil
}

type CmdManager_ExecuteClient interface {
	Send(*CmdPackage) error
	Recv() (*CmdPackage, error)
	grpc.ClientStream
}

type cmdManagerExecuteClient struct {
	grpc.ClientStream
}

func (x *cmdManagerExecuteClient) Send(m *CmdPackage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cmdManagerExecuteClient) Recv() (*CmdPackage, error) {
	m := new(CmdPackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CmdManager service

type CmdManagerServer interface {
	// Execute send commands to client to execute
	Execute(CmdManager_ExecuteServer) error
}

func RegisterCmdManagerServer(s *grpc.Server, srv CmdManagerServer) {
	s.RegisterService(&_CmdManager_serviceDesc, srv)
}

func _CmdManager_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CmdManagerServer).Execute(&cmdManagerExecuteServer{stream})
}

type CmdManager_ExecuteServer interface {
	Send(*CmdPackage) error
	Recv() (*CmdPackage, error)
	grpc.ServerStream
}

type cmdManagerExecuteServer struct {
	grpc.ServerStream
}

func (x *cmdManagerExecuteServer) Send(m *CmdPackage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cmdManagerExecuteServer) Recv() (*CmdPackage, error) {
	m := new(CmdPackage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CmdManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CmdManager",
	HandlerType: (*CmdManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _CmdManager_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/component/cmd/v1/api.proto",
}

func init() { proto.RegisterFile("pkg/component/cmd/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0x5d, 0x13, 0x4d, 0x1c, 0x7d, 0x45, 0x86, 0x17, 0x59, 0x3c, 0x94, 0x20, 0x3d, 0x84,
	0x52, 0x4c, 0xb5, 0x87, 0x96, 0x42, 0x0f, 0x45, 0x73, 0xe8, 0x41, 0x6b, 0x37, 0xfa, 0x01, 0xb6,
	0x71, 0x09, 0x45, 0xf3, 0x87, 0x35, 0x86, 0xfa, 0x19, 0xfa, 0xa5, 0xcb, 0xae, 0x31, 0xa5, 0xde,
	0x9e, 0xdf, 0x3c, 0xc3, 0xec, 0xec, 0x33, 0x70, 0x95, 0x6d, 0x23, 0x2f, 0x4c, 0xe3, 0x2c, 0x4d,
	0x44, 0x92, 0x7b, 0x61, 0xbc, 0xf1, 0x8a, 0xb1, 0xc7, 0xb3, 0xcf, 0x51, 0x26, 0xd3, 0x3c, 0xc5,
	0x7a, 0x31, 0x1e, 0x7e, 0x1b, 0x00, 0xd3, 0x78, 0xb3, 0xe4, 0xe1, 0x96, 0x47, 0x02, 0x11, 0xcc,
	0xf5, 0xfa, 0x75, 0x46, 0x89, 0x43, 0xdc, 0x16, 0xd3, 0x5a, 0xd5, 0x16, 0x3c, 0x16, 0xb4, 0x7e,
	0xaa, 0x29, 0x8d, 0x37, 0x60, 0xae, 0x8e, 0x99, 0xa0, 0x86, 0x43, 0xdc, 0xee, 0xa4, 0x3f, 0x2a,
	0xc6, 0xa3, 0xdf, 0x29, 0x4a, 0x2a, 0x97, 0xe9, 0x1e, 0xbc, 0x05, 0xf3, 0x45, 0x46, 0x7b, 0x6a,
	0x3a, 0x86, 0xdb, 0x9e, 0xd0, 0x8b, 0x5e, 0x65, 0xf9, 0x49, 0x2e, 0x8f, 0x4c, 0x77, 0x61, 0x1f,
	0x9a, 0x53, 0xbe, 0xdb, 0x09, 0x49, 0x1b, 0xfa, 0xbd, 0x92, 0x70, 0x00, 0xb6, 0xff, 0x25, 0xc2,
	0x43, 0x9e, 0x4a, 0xda, 0xd4, 0x4e, 0xc5, 0xca, 0x63, 0x62, 0x9f, 0x4d, 0xd3, 0x8d, 0xa0, 0x96,
	0x43, 0xdc, 0x7f, 0xac, 0xe2, 0xb3, 0x37, 0xe3, 0x39, 0xa7, 0xb6, 0x43, 0xdc, 0x0e, 0xab, 0x18,
	0x29, 0x58, 0x4a, 0xcf, 0xf7, 0x11, 0x6d, 0xe9, 0x91, 0x67, 0x54, 0x5b, 0x04, 0xb9, 0x14, 0x3c,
	0xa6, 0xe0, 0x10, 0xd7, 0x66, 0x25, 0x0d, 0x1e, 0xa0, 0x55, 0x2d, 0x8c, 0x3d, 0x30, 0xb6, 0xe2,
	0x58, 0x66, 0xa5, 0x24, 0xfe, 0x87, 0x46, 0xc1, 0x77, 0x87, 0x73, 0x56, 0x27, 0x78, 0xaa, 0x3f,
	0x92, 0xe1, 0x35, 0x58, 0x65, 0x2a, 0xd8, 0x06, 0x8b, 0xf9, 0xef, 0x6b, 0x3f, 0x58, 0xf5, 0x6a,
	0xd8, 0x01, 0x9b, 0xf9, 0xc1, 0xf2, 0x6d, 0x11, 0xf8, 0x3d, 0x32, 0x79, 0xd6, 0xc7, 0x98, 0xf3,
	0x84, 0x47, 0x42, 0xa2, 0x07, 0xd6, 0xe9, 0x8b, 0x02, 0xbb, 0x7f, 0x53, 0x1b, 0x5c, 0xf0, 0xb0,
	0xe6, 0x92, 0x3b, 0xf2, 0xd1, 0xd4, 0x77, 0xbd, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x76, 0xf3,
	0x03, 0xd5, 0xf9, 0x01, 0x00, 0x00,
}
